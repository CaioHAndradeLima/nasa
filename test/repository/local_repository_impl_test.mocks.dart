// Mocks generated by Mockito 5.4.4 from annotations
// in nasa_pictures/test/repository/local_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:localstore/localstore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionRef_0 extends _i1.SmartFake implements _i2.CollectionRef {
  _FakeCollectionRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentRef_1 extends _i1.SmartFake implements _i2.DocumentRef {
  _FakeDocumentRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Localstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalstore extends _i1.Mock implements _i2.Localstore {
  MockLocalstore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionRef collection(String? path) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [path],
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [path],
          ),
        ),
      ) as _i2.CollectionRef);
}

/// A class which mocks [CollectionRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionRef extends _i1.Mock implements _i2.CollectionRef {
  MockCollectionRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.Stream<Map<String, dynamic>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<Map<String, dynamic>>.empty(),
      ) as _i4.Stream<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>?> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i2.DocumentRef doc([String? id]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [id],
        ),
        returnValue: _FakeDocumentRef_1(
          this,
          Invocation.method(
            #doc,
            [id],
          ),
        ),
      ) as _i2.DocumentRef);

  @override
  _i2.CollectionRef where(
    dynamic field, {
    dynamic isEqualTo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {#isEqualTo: isEqualTo},
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #where,
            [field],
            {#isEqualTo: isEqualTo},
          ),
        ),
      ) as _i2.CollectionRef);

  @override
  _i4.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DocumentRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentRef extends _i1.Mock implements _i2.DocumentRef {
  MockDocumentRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.Future<dynamic> set(
    Map<String, dynamic>? data, [
    _i2.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<Map<String, dynamic>?> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<dynamic> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i2.CollectionRef collection(String? id) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [id],
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [id],
          ),
        ),
      ) as _i2.CollectionRef);
}

/// A class which mocks [Localstore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalstoreRelaxed extends _i1.Mock implements _i2.Localstore {
  @override
  _i2.CollectionRef collection(String? path) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [path],
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [path],
          ),
        ),
      ) as _i2.CollectionRef);
}

/// A class which mocks [CollectionRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionRefRelaxed extends _i1.Mock implements _i2.CollectionRef {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.Stream<Map<String, dynamic>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<Map<String, dynamic>>.empty(),
        returnValueForMissingStub: _i4.Stream<Map<String, dynamic>>.empty(),
      ) as _i4.Stream<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>?> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i2.DocumentRef doc([String? id]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [id],
        ),
        returnValue: _FakeDocumentRef_1(
          this,
          Invocation.method(
            #doc,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakeDocumentRef_1(
          this,
          Invocation.method(
            #doc,
            [id],
          ),
        ),
      ) as _i2.DocumentRef);

  @override
  _i2.CollectionRef where(
    dynamic field, {
    dynamic isEqualTo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {#isEqualTo: isEqualTo},
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #where,
            [field],
            {#isEqualTo: isEqualTo},
          ),
        ),
        returnValueForMissingStub: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #where,
            [field],
            {#isEqualTo: isEqualTo},
          ),
        ),
      ) as _i2.CollectionRef);

  @override
  _i4.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DocumentRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentRefRelaxed extends _i1.Mock implements _i2.DocumentRef {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.Future<dynamic> set(
    Map<String, dynamic>? data, [
    _i2.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<Map<String, dynamic>?> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<dynamic> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i2.CollectionRef collection(String? id) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [id],
        ),
        returnValue: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [id],
          ),
        ),
        returnValueForMissingStub: _FakeCollectionRef_0(
          this,
          Invocation.method(
            #collection,
            [id],
          ),
        ),
      ) as _i2.CollectionRef);
}
